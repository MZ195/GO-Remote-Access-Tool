package uploadfiles

import (
	"bufio"
	"encoding/gob"
	"errors"
	"fmt"
	"net"
	"os"
)

type FileStruct struct {
	FileName    string
	FileSize    int
	FileContent []byte
}

func Read_file(fileName string) ([]byte, error) {
	file, err := os.Open(fileName)
	if err != nil {
		return nil, err
	}

	defer file.Close()

	file_stats, err := file.Stat()

	file_size := file_stats.Size()
	fmt.Println("[+] The file contains ", file_size, " bytes")

	// make an empty list if bytes to fill
	file_bytes := make([]byte, file_size)

	buffer := bufio.NewReader(file)

	_, err = buffer.Read(file_bytes)

	return file_bytes, err
}

func Chcek_file_existance(fileName string) bool {
	_, err := os.Stat(fileName)

	if err != nil {
		if os.IsNotExist(err) {
			return false
		}
	}
	return true
}

func Upload_files(connection net.Conn) (err error) {

	fileName := "test.jpg"
	if !Chcek_file_existance(fileName) {
		return errors.New("File does not exists!")
	}

	content, err := Read_file(fileName)

	file_size := len(content)

	file_struct := &FileStruct{}

	file_struct.FileName = fileName
	file_struct.FileSize = file_size
	file_struct.FileContent = content

	encoder := gob.NewEncoder(connection)

	err = encoder.Encode(file_struct)

	if err != nil {
		fmt.Println("[+] Error while encoding: ", err)
		return
	}

	reader := bufio.NewReader(connection)
	status, err := reader.ReadString('\n')

	fmt.Println(status)

	return
}
